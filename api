import requests

KAKAO_API_KEY = '606eb0e1026765fdeb477779e4235c7d'


def search_location(place):
    url = 'https://dapi.kakao.com/v2/local/search/keyword.json'
    headers = {'Authorization': f'KakaoAK {KAKAO_API_KEY}'}
    params = {'query': place}

    try:
        res = requests.get(url, headers=headers, params=params)
        res.raise_for_status()
        data = res.json()

        if data['documents']:
            x = float(data['documents'][0]['x'])
            y = float(data['documents'][0]['y'])
            return x, y
        else:
            print(f"'{place}' 검색 결과 없음.")
            return None, None
    except Exception as e:
        print("장소 검색 실패:", e)
        return None, None

def get_route_duration(start_x, start_y, end_x, end_y):
    url = 'https://apis-navi.kakaomobility.com/v1/directions'
    headers = {'Authorization': f'KakaoAK {KAKAO_API_KEY}'}
    params = {
        'origin': f'{start_x},{start_y}',
        'destination': f'{end_x},{end_y}'
    }

    try:
        res = requests.get(url, headers=headers, params=params)
        res.raise_for_status()
        data = res.json()

        if 'routes' in data and data['routes']:
            duration_sec = data['routes'][0]['summary']['duration']
            return duration_sec // 60 
        else:
            print("경로 정보 없음.")
            return None
    except Exception as e:
        print("[오류] 경로 계산 실패:", e)
        return None


def main():
    print("교통 소요 시간 계산기")

    start = input("출발지 입력: ").strip()
    end = input("도착지 입력: ").strip()

    sx, sy = search_location(start)
    ex, ey = search_location(end)

    if None in (sx, sy, ex, ey):
        print("장소 좌표를 찾을 수 없습니다.")
        return

    time_min = get_route_duration(sx, sy, ex, ey)
    if time_min is not None:
        print(f"예상 소요 시간: {time_min}분")
    else:
        print("소요 시간 계산 실패.")


if __name__ == '__main__':
    main()
